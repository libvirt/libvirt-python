<?xml version="1.0"?>
<api name='libvir-python'>
  <!-- This file lists libvirt API functions whose Python stubs are
       written by hand in libvirt-override.c, but the Python-level code
       are still automatically generated by the generator.py script.

       The type of return value is supposed to be C type. If a function's
       stub will return a python non-integer data type like string, list,
       tuple, dictionary, etc, please use "char *" as the type of its return
       value.
  -->
  <symbols>
    <function name="virConnectGetVersion" file='python'>
      <info>Returns the running hypervisor version of the connection host</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='int' info="0 on success, -1 on error"/>
    </function>
    <function name="virConnectGetLibVersion" file='python'>
      <info>Returns the libvirt version of the connection host</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='int' info="0 on success, -1 on error"/>
    </function>
    <function name="virConnectListDomainsID" file='python'>
      <info>Returns the list of the ID of the domains on the hypervisor</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info="the list of ID or None in case of error"/>
    </function>
    <function name='virConnectListDefinedDomains' file='python'>
      <info>list the defined domains, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virConnectListAllDomains' file='python'>
      <info>returns list of all defined domains</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of domains or None in case of error'/>
    </function>
    <function name='virConnectListNetworks' file='python'>
      <info>list the networks, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virConnectListDefinedNetworks' file='python'>
      <info>list the defined networks, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virConnectListAllNetworks' file='python'>
      <info>returns list of all networks</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of networks or None in case of error'/>
    </function>
    <function name='virDomainLookupByUUID' file='python'>
      <info>Try to lookup a domain on the given hypervisor based on its UUID.</info>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the UUID string for the domain, must be 16 bytes'/>
    </function>
    <function name='virNetworkLookupByUUID' file='python'>
      <info>Try to lookup a network on the given hypervisor based on its UUID.</info>
      <return type='virNetworkPtr' info='a new network object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the UUID string for the network, must be 16 bytes'/>
    </function>
    <function name='virNetworkPortLookupByUUID' file='python'>
      <info>Try to lookup a port on the given network based on its UUID.</info>
      <return type='virNetworkPortPtr' info='a new network port object or NULL in case of failure'/>
      <arg name='net' type='virNetworkPtr' info='pointer to the network object'/>
      <arg name='uuid' type='const unsigned char *' info='the UUID string for the network port, must be 16 bytes'/>
    </function>
    <function name='virDomainGetInfo' file='python'>
      <info>Extract information about a domain. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetState' file='python'>
      <info>Extract domain state.</info>
      <return type='char *' info='the list containing state and reason or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='additional flags'/>
    </function>
    <function name='virDomainGetControlInfo' file='python'>
      <info>Extract details about current state of control interface to a domain.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='additional flags'/>
    </function>
    <function name='virDomainGetBlockInfo' file='python'>
      <info>Extract information about a domain block device size</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='path' type='const char *' info='path to the block device or file'/>
      <arg name='flags' type='unsigned int' info='currently unused'/>
    </function>
    <function name='virDomainGetJobInfo' file='python'>
      <info>Extract information about an active job being processed for a domain.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetJobStats' file='python'>
      <info>Extract information about an active job being processed for a domain.</info>
      <return type='char *' info='dictionary mapping field names to values or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='flags, currently unused, pass 0.'/>
    </function>
    <function name='virNodeGetInfo' file='python'>
      <info>Extract hardware information about the Node. Note that the memory size is reported in MiB instead of KiB.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virNodeGetSecurityModel' file='python'>
      <info>Extract information about the hypervisor security model</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
    </function>
    <function name='virDomainGetSecurityLabel' file='python'>
      <info>Extract information about the domain security label. Only the first label will be returned.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetSecurityLabelList' file='python'>
      <info>Extract information about the domain security label. A list of all labels will be returned.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virNodeGetCPUStats' file='python'>
      <info>Extract node's CPU statistics.</info>
      <return type='char *' info='dictionary mapping field names to values or None in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='cpuNum' type='int' info='number of node cpu. (VIR_NODE_CPU_STATS_ALL_CPUS means total cpu statistics)'/>
      <arg name='flags' type='unsigned int' info='additional flags'/>
    </function>
    <function name='virNodeGetMemoryStats' file='python'>
      <info>Extract node's memory statistics.</info>
      <return type='char *' info='dictionary mapping field names to values or None in case of error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='cellNum' type='int' info='number of node cell. (VIR_NODE_MEMORY_STATS_ALL_CELLS means total cell statistics)'/>
      <arg name='flags' type='unsigned int' info='additional flags'/>
    </function>
    <function name='virDomainGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a domain.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virDomainGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the domain as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='pool' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name='virNetworkGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a network.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='domain' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the network as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='net' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virNetworkPortGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a network port.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='domain' type='virNetworkPortPtr' info='a network port object'/>
    </function>
    <function name='virNetworkPortGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the network port as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='net' type='virNetworkPortPtr' info='a network port object'/>
    </function>
    <function name='virStoragePoolGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a storage pool.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='pool' type='virStoragePoolPtr' info='a storage pool object'/>
    </function>
    <function name='virStoragePoolGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the storage pool as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='pool' type='virStoragePoolPtr' info='a storage pool object'/>
    </function>
    <function name='virNetworkGetAutostart' file='python'>
      <info>Extract the autostart flag for a network.</info>
      <return type='int' info='the autostart flag, or None in case of error'/>
      <arg name='domain' type='virNetworkPtr' info='a network object'/>
    </function>
    <function name='virDomainGetAutostart' file='python'>
      <info>Extract the autostart flag for a domain</info>
      <return type='int' info='the autostart flag, or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a network object'/>
    </function>
    <function name='virStoragePoolGetAutostart' file='python'>
      <info>Extract the autostart flag for a storage pool</info>
      <return type='int' info='the autostart flag, or None in case of error'/>
      <arg name='pool' type='virStoragePoolPtr' info='a storage pool object'/>
    </function>
    <function name='virNodeDeviceGetAutostart' file='python'>
      <info>Extract the autostart flag for a node device.</info>
      <return type='int' info='the autostart flag, or None in case of error'/>
      <arg name='dev' type='virNodeDevicePtr' info='a node device object'/>
    </function>
    <function name='virDomainBlockStats' file='python'>
      <info>Extracts block device statistics for a domain</info>
      <return type='char *' info='a tuple of statistics'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='path' type='char *' info='the path for the block device'/>
    </function>
    <function name='virDomainBlockStatsFlags' file='python'>
      <info>Extracts block device statistics parameters of a running domain</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='path' type='char *' info='the path for the block device'/>
      <arg name='flags' type='int' info='flags (unused; pass 0)'/>
    </function>
    <function name='virDomainGetCPUStats' file='python'>
      <info>Extracts CPU statistics for a running domain. On success it will
   return a list of data of dictionary type. If boolean total is False or 0, the
   first element of the list refers to CPU0 on the host, second element is
   CPU1, and so on. The format of data struct is as follows:
   [{cpu_time:xxx}, {cpu_time:xxx}, ...]
   If it is True or 1, it returns total domain CPU statistics in the format of
   [{cpu_time:xxx, user_time:xxx, system_time:xxx}]</info>
     <return type='char *' info='returns a list of dictionary in case of success, None in case of error'/>
     <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
     <arg name='total' type='bool' info='on true, return total domain CPU statistics, false return per-cpu info'/>
     <arg name='flags' type='int' info='flags (unused; pass 0)'/>
    </function>
    <function name='virDomainInterfaceStats' file='python'>
      <info>Extracts interface device statistics for a domain</info>
      <return type='char *' info='a tuple of statistics'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='path' type='char *' info='the path for the interface device'/>
    </function>
    <function name='virDomainMemoryStats' file='python'>
      <info>Extracts memory statistics for a domain</info>
      <return type='char *' info='a dictionary of statistics'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
    </function>
    <function name="virNodeGetCellsFreeMemory" file='python'>
      <info>Returns the available memory for a list of cells</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='startCell' type='int' info='first cell in the list'/>
      <arg name='maxCells' type='int' info='number of cell in the list'/>
      <return type='char *' info="the list available memory in the cells"/>
    </function>
    <function name='virDomainGetSchedulerParameters' file='python'>
      <info>Get the scheduler parameters, the @params array will be filled with the values.</info>
      <return type='char *' info='None in case of error, returns a dictionary of params.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
    </function>
    <function name='virDomainGetSchedulerParametersFlags' file='python'>
      <info>Get the scheduler parameters</info>
     <return type='char *' info='None in case of error, returns a dictionary of params'/>
     <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
     <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetSchedulerType' file='python'>
      <info>Get the scheduler type.</info>
      <return type='char *' info='NULL in case of error. The caller must free the returned string.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
    </function>
    <function name='virDomainGetVcpus' file='python'>
      <info>Extract information about virtual CPUs of domain, store it in info array and also in cpumaps.</info>
      <return type='char *' info='None in case of error, returns a tuple of vcpu info and vcpu map.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
    </function>
    <function name='virDomainPinVcpu' file='python'>
      <info>Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='vcpu' type='unsigned int' info='virtual CPU number'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
    </function>
    <function name='virDomainPinVcpuFlags' file='python'>
      <info>Dynamically change the real CPUs which can be allocated to a virtual CPU. This function requires privileged access to the hypervisor.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='vcpu' type='unsigned int' info='virtual CPU number'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='flags' type='int' info='flags to specify'/>
    </function>
    <function name='virDomainGetVcpuPinInfo' file='python'>
      <info>Query the CPU affinity setting of all virtual CPUs of domain</info>
      <return type='char *' info='the array of cpumap'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetEmulatorPinInfo' file='python'>
      <info>Query the CPU affinity setting of the emulator process of domain</info>
      <return type='char *' info='the array of cpumap'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainPinEmulator' file='python'>
      <info>Dynamically change the real CPUs which can be allocated to the emulator process of a domain.
            This function requires privileged access to the hypervisor.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='flags' type='int' info='flags to specify'/>
    </function>
    <function name='virDomainGetIOThreadInfo' file='python'>
      <info>Query the CPU affinity setting of the IOThreads of the domain</info>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object, or NULL for Domain0'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
      <return type='char *' info="list of IOThreads information including the iothread_id, the cpumap, and the cpumap length for each iothread_id."/>
    </function>
    <function name='virDomainPinIOThread' file='python'>
      <info>Dynamically change the real CPUs which can be allocated to an IOThread. This function requires privileged access to the hypervisor.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='iothread_val' type='unsigned int' info='iothread_id number'/>
      <arg name='cpumap' type='unsigned char *' info='pointer to a bit map of real CPUs (in 8-bit bytes) (IN) Each bit set to 1 means that corresponding CPU is usable. Bytes are stored in little-endian order: CPU0-7, 8-15... In each byte, lowest CPU number is least significant bit.'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetIOThreadParams' file='python'>
      <info>Dynamically allow changing the IOThread polling related parameters. This function requires privileged access to the hypervisor.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='iothread_val' type='unsigned int' info='iothread_id number'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to IOThread polling parameter objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetSchedulerParameters' file='python'>
      <info>Change the scheduler parameters</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virSchedParameterPtr' info='pointer to scheduler parameter objects'/>
    </function>
    <function name='virDomainSetSchedulerParametersFlags' file='python'>
      <info>Change the scheduler parameters</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virSchedParameterPtr' info='pointer to scheduler parameter objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetBlkioParameters' file='python'>
      <info>Change the blkio tunables</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virBlkioParameterPtr' info='pointer to blkio tunable objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetBlkioParameters' file='python'>
      <info>Get the blkio parameters</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetMemoryParameters' file='python'>
      <info>Change the memory tunables</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virMemoryParameterPtr' info='pointer to memory tunable objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetMemoryParameters' file='python'>
      <info>Get the memory parameters</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetNumaParameters' file='python'>
      <info>Change the NUMA tunables</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to numa tunable objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetNumaParameters' file='python'>
      <info>Get the NUMA parameters</info>
      <return type='char *' info='returns a dictionary of params in case of success, None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainGetPerfEvents' file='python'>
      <info>Get all perf events setting.</info>
      <return type='char *' info='returns a dictionary of params in case of success, None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetPerfEvents' file='python'>
      <info>Enable or disable the particular list of perf events</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to perf events parameter object'/>
      <arg name='flags' type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
    <function name='virDomainSetInterfaceParameters' file='python'>
      <info>Change the bandwidth tunables for a interface device</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='device' type='const char *' info='interface name'/>
      <arg name='params' type='virTypedParameterPtr' info='Pointer to bandwidth tuning params object'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainModificationImpact'/>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
    </function>
    <function name='virDomainGetInterfaceParameters' file='python'>
      <info>Get the bandwidth tunables for a interface device</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='device' type='const char *' info='interface name'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainModificationImpact'/>
      <return type='char *' info='the bandwidth tunables value or None in case of error'/>
    </function>

    <function name='virConnectListStoragePools' file='python'>
      <info>list the storage pools, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names of None in case of error'/>
    </function>
    <function name='virConnectListDefinedStoragePools' file='python'>
      <info>list the defined storage pool, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names of None in case of error'/>
    </function>
    <function name='virConnectListAllStoragePools' file='python'>
      <info>returns list of all storage pools</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of pools or None in case of error'/>
    </function>
    <function name='virStoragePoolListVolumes' file='python'>
      <info>list the storage volumes, stores the pointers to the names in @names</info>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to the storage pool'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virStoragePoolListAllVolumes' file='python'>
      <info>return list of storage volume objects</info>
      <arg name='pool' type='virStoragePoolPtr' info='pointer to the storage pool'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of volumes or None in case of error'/>
    </function>
    <function name='virStoragePoolGetInfo' file='python'>
      <info>Extract information about a storage pool. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='pool' type='virStoragePoolPtr' info='a storage pool object'/>
    </function>
    <function name='virStorageVolGetInfo' file='python'>
      <info>Extract information about a storage volume. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='vol' type='virStorageVolPtr' info='a storage vol object'/>
    </function>
    <function name='virStorageVolGetInfoFlags' file='python'>
      <info>Extract information about a storage volume. Note that if the connection used to get the domain is limited only a partial set of the information can be extracted.</info>
      <return type='char *' info='the list of information or None in case of error'/>
      <arg name='vol' type='virStorageVolPtr' info='a storage vol object'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virStorageVolInfoFlags'/>
    </function>
    <function name='virNodeListDevices' file='python'>
      <info>list the node devices</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='cap' type='const unsigned char *' info='capability name'/>
      <arg name='flags' type='unsigned int' info='flags (unused; pass 0)'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virConnectListAllNodeDevices' file='python'>
      <info>returns list of all host node devices</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of host node device or None in case of error'/>
    </function>
    <function name='virNodeDeviceListCaps' file='python'>
      <info>list the node device's capabilities</info>
      <arg name='dev' type='virNodeDevicePtr' info='pointer to the node device'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virSecretGetValue' file='libvirt' module='libvirt'>
      <info>Fetches the value associated with a secret.</info>
      <return type='char *' info='the secret value or None in case of error'/>
      <arg name='secret' type='virSecretPtr' info='virSecret secret'/>
      <arg name='flags' type='unsigned int' info='flags (unused; pass 0)'/>
    </function>
    <function name='virConnectListSecrets' file='libvirt' module='libvirt'>
      <info>List the defined secret IDs</info>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <return type='char *' info='the list of secret IDs or None in case of error'/>
    </function>
    <function name='virConnectListAllSecrets' file='python'>
      <info>returns list of all interfaces</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of secrets or None in case of error'/>
    </function>
    <function name='virSecretSetValue' file='libvirt' module='libvirt'>
      <info>Associates a value with a secret.</info>
      <return type='int' info='0 on success, -1 on failure.'/>
      <arg name='secret' type='virSecretPtr' info='virSecret secret'/>
      <arg name='value' type='const char *' info='The secret value'/>
      <arg name='flags' type='unsigned int' info='flags (unused; pass 0)'/>
    </function>
    <function name='virSecretLookupByUUID' file='python'>
      <info>Try to lookup a secret on the given hypervisor based on its UUID.</info>
      <return type='virSecretPtr' info='a new secret object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the UUID string for the secret, must be 16 bytes'/>
    </function>
    <function name='virSecretGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a secret.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='secret' type='virSecretPtr' info='a secret object'/>
    </function>
    <function name='virSecretGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the secret as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='secret' type='virSecretPtr' info='a secret object'/>
    </function>
    <function name='virConnectListNWFilters' file='libvirt' module='libvirt'>
      <info>List the defined network filters</info>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <return type='char *' info='the list of network filter IDs or None in case of error'/>
    </function>
    <function name='virConnectListAllNWFilters' file='python'>
      <info>returns list of all network fitlers</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of network filters or None in case of error'/>
    </function>
    <function name='virConnectListAllNWFilterBindings' file='python'>
      <info>returns list of all network fitler bindings</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of network filter bindings or None in case of error'/>
    </function>
    <function name='virNWFilterLookupByUUID' file='python'>
      <info>Try to lookup a network filter on the given hypervisor based on its UUID.</info>
      <return type='virNWFilterPtr' info='a new network filter object or NULL in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='uuid' type='const unsigned char *' info='the UUID string for the secret, must be 16 bytes'/>
    </function>
    <function name='virNWFilterGetUUID' file='python'>
      <info>Extract the UUID unique Identifier of a network filter.</info>
      <return type='char *' info='the 16 bytes string or None in case of error'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a network filter object'/>
    </function>
    <function name='virNWFilterGetUUIDString' file='python'>
      <info>Fetch globally unique ID of the network filter as a string.</info>
      <return type='char *' info='the UUID string or None in case of error'/>
      <arg name='nwfilter' type='virNWFilterPtr' info='a network filter object'/>
    </function>
    <function name='virConnectListInterfaces' file='python'>
      <info>list the running interfaces, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names of None in case of error'/>
    </function>
    <function name='virConnectListDefinedInterfaces' file='python'>
      <info>list the defined interfaces, stores the pointers to the names in @names</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <return type='char *' info='the list of Names of None in case of error'/>
    </function>
    <function name='virConnectListAllInterfaces' file='python'>
      <info>returns list of all interfaces</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='unsigned int' info='optional flags'/>
      <return type='char *' info='the list of interfaces or None in case of error'/>
    </function>
    <function name='virConnectBaselineCPU' file='python'>
      <info>Computes the most feature-rich CPU which is compatible with all given host CPUs.</info>
      <return type='char *' info='XML description of the computed CPU or NULL on error.'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='xmlCPUs' type='const char **' info='array of XML descriptions of host CPUs'/>
      <arg name='flags' type='unsigned int' info='fine-tuning flags, currently unused, pass 0.'/>
    </function>
    <function name='virConnectGetCPUModelNames' file='python'>
      <info>Get the list of supported CPU models.</info>
      <return type='char *' info='list of supported CPU models'/>
      <arg name='conn' type='virConnectPtr' info='virConnect connection'/>
      <arg name='arch' type='const char *' info='arch'/>
      <arg name='flags' type='unsigned int' info='fine-tuning flags, currently unused, pass 0.'/>
    </function>
    <function name='virDomainSnapshotListNames' file='python'>
      <info>collect the list of snapshot names for the given domain</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virDomainListAllSnapshots' file='python'>
      <info>returns the list of snapshots for the given domain</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of snapshots or None in case of error'/>
    </function>
    <function name='virDomainSnapshotListChildrenNames' file='python'>
      <info>collect the list of child snapshot names for the given snapshot</info>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='pointer to the snapshot'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of Names or None in case of error'/>
    </function>
    <function name='virDomainSnapshotListAllChildren' file='python'>
      <info>returns the list of child snapshots for the given snapshot</info>
      <arg name='snapshot' type='virDomainSnapshotPtr' info='pointer to the snapshot'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of snapshots or None in case of error'/>
    </function>
    <function name='virDomainRevertToSnapshot' file='python'>
      <info>revert the domain to the given snapshot</info>
      <arg name='dom' type='virDomainPtr' info='dummy domain pointer'/>
      <arg name='snap' type='virDomainSnapshotPtr' info='pointer to the snapshot'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='int' info="0 on success, -1 on error"/>
    </function>
    <function name='virDomainListAllCheckpoints' file='python'>
      <info>returns the list of checkpoints for the given domain</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of checkpoints or None in case of error'/>
    </function>
    <function name='virDomainCheckpointListAllChildren' file='python'>
      <info>collect the list of child checkpoint names for the given checkpoint</info>
      <arg name='checkpoint' type='virDomainCheckpointPtr' info='pointer to the checkpoint'/>
      <arg name='flags' type='unsigned int' info='flags'/>
      <return type='char *' info='the list of checkpoints or None in case of error'/>
    </function>
    <function name='virDomainGetBlockJobInfo' file='python'>
      <info>Get progress information for a block job</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='path' type='const char *' info='Fully-qualified filename of disk'/>
      <arg name='flags' type='unsigned int' info='fine-tuning flags, currently unused, pass 0.'/>
      <return type='char *' info='A dictionary containing job information.' />
    </function>
    <function name='virDomainMigrateGetCompressionCache' file='python'>
      <info>Get current size of the cache (in bytes) used for compressing
            repeatedly transferred memory pages during live migration.</info>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='flags, currently unused, pass 0.'/>
      <return type='unsigned long long' info='current cache size, or None in case of error'/>
    </function>
    <function name='virDomainMigrateGetMaxSpeed' file='python'>
      <info>Get currently configured maximum migration speed for a domain</info>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='flags, currently unused, pass 0.'/>
      <return type='unsigned long' info='current max migration speed, or None in case of error'/>
    </function>
    <function name='virDomainMigrateGetMaxDowntime' file='python'>
      <info>Get the current value of the maximum downtime (in milliseconds)
            allowed during a migration of a guest.</info>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='flags, currently unused, pass 0.'/>
      <return type='unsigned long long' info='current downtime or None in case of error'/>
    </function>
    <function name='virDomainMigrate3' file='python'>
      <info>Migrate the domain object from its current host to the destination host
            given by dconn (a connection to the destination host).</info>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconn' type='virConnectPtr' info='pointer to the destination host connection'/>
      <arg name='params' type='char *' info='dictionary with migration parameters'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainMigrateFlags'/>
      <return type='virDomainPtr' info='a new domain object or NULL in case of failure'/>
    </function>
    <function name='virDomainMigrateToURI3' file='python'>
      <info>Migrate the domain object from its current host to the destination host
            given by URI.</info>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='dconnuri' type='char *' info='URI for target libvirtd if @flags includes VIR_MIGRATE_PEER2PEER'/>
      <arg name='params' type='char *' info='dictionary with migration parameters'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainMigrateFlags'/>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
    </function>
    <function name='virDomainSetBlockIoTune' file='python'>
      <info>Change the I/O tunables for a block device</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='disk' type='const char *' info='disk name'/>
      <arg name='params' type='virTypedParameterPtr' info='Pointer to blkio tuning params object'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainModificationImpact'/>
      <return type='int' info='0 in case of success, -1 in case of failure'/>
    </function>
    <function name='virDomainGetBlockIoTune' file='python'>
      <info>Get the I/O tunables for a block device</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='disk' type='const char *' info='disk name'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainModificationImpact'/>
      <return type='char *' info='the I/O tunables value or None in case of error'/>
    </function>
    <function name='virDomainBlockPeek' file='python'>
      <info>Read the contents of domain's disk device</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='disk' type='const char *' info='disk name'/>
      <arg name='offset' type='unsigned long long' info='offset within block device'/>
      <arg name='size' type='size_t' info='size to read'/>
      <arg name='flags' type='unsigned int' info='unused, always pass 0'/>
      <return type='char *' info='the returned buffer or None in case of error'/>
    </function>
    <function name='virDomainMemoryPeek' file='python'>
      <info>Read the contents of domain's memory</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='start' type='unsigned long long' info='start of memory to peek'/>
      <arg name='size' type='size_t' info='size of memory to peek'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virDomainMemoryFlags'/>
      <return type='char *' info='the returned buffer or None in case of error'/>
    </function>
    <function name='virDomainGetDiskErrors' file='python'>
      <info>Extract errors on disk devices.</info>
      <return type='char *' info='dictionary of disks and their errors or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='unused, always pass 0'/>
    </function>
    <function name='virNodeSetMemoryParameters' file='python'>
      <info>Change the node memory tunables</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to the memory tunable objects'/>
      <arg name='flags'  type='int' info='unused, always pass 0'/>
    </function>
    <function name='virNodeGetMemoryParameters' file='python'>
      <info>Get the node memory parameters</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='int' info='unused, always pass 0'/>
    </function>
    <function name='virNodeGetCPUMap' file='python'>
      <info>Get node CPU information</info>
      <return type='char *' info='(cpunum, cpumap, online) on success, None on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='flags' type='int' info='unused, pass 0'/>
    </function>
    <function name="virNodeGetFreePages" file='python'>
      <info>Returns the number of available pages for a list of cells and page sizes</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='pages' type='char *' info='list of desired page sizes'/>
      <arg name='startCell' type='int' info='first cell in the list'/>
      <arg name='maxCells' type='int' info='number of cell in the list'/>
      <arg name='flags' type='int' info='unused, pass 0'/>
      <return type='char *' info='the list available memory in the cells'/>
    </function>
    <function name="virNetworkGetDHCPLeases" file='python'>
      <info>Returns a list of dhcp leases for interfaces connected to the given virtual network</info>
      <arg name='network' type='virNetworkPtr' info='a network object'/>
      <arg name='mac' type='const char *' info='optional mac address'/>
      <arg name='flags' type='unsigned int' info='unused, pass 0'/>
      <return type='char *' info="list of leases"/>
    </function>
    <function name="virDomainBlockCopy" file="python">
      <info>Copy the guest-visible contents of a disk image to a new file described by destxml</info>
      <arg name='dom' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='disk' type='const char *' info='path to the block device, or device shorthand'/>
      <arg name='destxml' type='const char *' info='XML description of the copy destination'/>
      <arg name='params' type='virTypedParameterPtr' info='optional pointer to block copy parameter object, or NULL'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virDomainBlockCopyFlags'/>
      <return type='int' info='0 if the operation has started, -1 on failure'/>
    </function>
    <function name="virNodeAllocPages" file='python'>
      <info>Allocate or free some pages in the huge pages pool</info>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='pages' type='char *' info='dictionary of desired page sizes, key is page size, value is page count'/>
      <arg name='startCell' type='int' info='optional first cell in the list'/>
      <arg name='cellCount' type='int' info='optional number of cell in the list'/>
      <arg name='flags' type='unsigned int' info='an OR&apos;ed set of virNodeAllocPagesFlags'/>
      <return type='int' info='the number of nodes successfully adjusted or -1 in case of an error'/>
    </function>
    <function name="virDomainGetFSInfo" file='python'>
      <info>Get a list of mapping information for each mounted file systems within the specified guest and the disks.</info>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='unsigned int' info='unused, pass 0'/>
      <return type='char *' info="list of mounted filesystems information"/>
    </function>
    <function name='virDomainInterfaceAddresses' file='python'>
      <info>returns a dictionary of domain interfaces along with their MAC and IP addresses</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='source' type='unsigned int' info='the data source'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
      <return type='char *' info="dictionary of domain interfaces along with their MAC and IP addresses"/>
    </function>
    <function name='virDomainGetGuestVcpus' file='python'>
      <info>returns a dictionary containing information regarding guest vcpus</info>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='flags' type='unsigned int' info='extra flags; not used yet, so callers should always pass 0'/>
      <return type='int' info="dictionary of vcpu data returned by the guest agent"/>
    </function>
    <function name='virConnectBaselineHypervisorCPU' file='python'>
      <info>Computes the most feature-rich CPU which is compatible with all given CPUs and can be provided by the specified hypervisor.</info>
      <return type='char *' info='XML description of the computed CPU or NULL on error.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='emulator' type='const char *' info='path to the emulator binary'/>
      <arg name='arch' type='const char *' info='CPU architecture'/>
      <arg name='machine' type='const char *' info='machine type'/>
      <arg name='virttype' type='const char *' info='virtualization type'/>
      <arg name='xmlCPUs' type='const char **' info='array of XML descriptions of CPUs'/>
      <arg name='flags' type='unsigned int' info='bitwise-OR of virConnectBaselineCPUFlags'/>
    </function>
    <function name='virDomainGetLaunchSecurityInfo' file='python'>
      <info>Get launch security info for a domain</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='flags' type='int' info='unused, always pass 0'/>
    </function>
    <function name='virNodeGetSEVInfo' file='python'>
      <info>Get platform specific information from the SEV firmware</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='conn' type='virConnectPtr' info='pointer to hypervisor connection'/>
      <arg name='flags' type='int' info='unused, always pass 0'/>
    </function>
    <function name='virConnectGetDomainCapabilities' file='libvirt-domain' module='libvirt-domain'>
      <info>Query domain capabilities</info>
      <return type='char *' info='NULL in case of error or an XML string defining the capabilities.'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='emulatorbin' type='const char *' info='optional path to emulator'/>
      <arg name='arch' type='const char *' info='optional domain architecture'/>
      <arg name='machine' type='const char *' info='optional machine type'/>
      <arg name='virttype' type='const char *' info='optional virtualization type'/>
      <arg name='flags' type='int' info='unused, always pass 0'/>
    </function>
    <function name='virNetworkPortSetParameters' file='python'>
      <info>Change the port tunables</info>
      <return type='int' info='-1 in case of error, 0 in case of success.'/>
      <arg name='port' type='virNetworkPortPtr' info='pointer to network port object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to tunable objects'/>
      <arg name='flags'  type='int' info='unused, always pass 0'/>
    </function>
    <function name='virNetworkPortGetParameters' file='python'>
      <info>Get the port parameters</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='port' type='virNetworkPortPtr' info='pointer to network port object'/>
      <arg name='flags'  type='int' info='unused, always pass 0'/>
    </function>
    <function name='virDomainGetGuestInfo' file='python'>
      <info>Get aggregated info from guest agent</info>
      <return type='char *' info='None in case of error, returns a dictionary of params'/>
      <arg name='dom' type='virDomainPtr' info='pointer to the domain'/>
      <arg name='types' type='int' info='optional binary-OR of virDomainGuestInfoTypes'/>
      <arg name='flags' type='int' info='unused, always pass 0'/>
    </function>
    <function name='virConnectSetIdentity' file='libvirt-host' module='libvirt-host'>
      <info>Override the default identity information associated with the connection.</info>
      <return type='int' info='0 if the identity change was accepted, -1 on error'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='params' type='virTypedParameterPtr' info='parameters containing the identity attributes'/>
      <arg name='flags' type='unsigned int' info='currently unused, pass 0'/>
    </function>
    <function name='virDomainAuthorizedSSHKeysGet' file='python'>
      <info>Fetch list of public SSH authorized keys for given user in domain.</info>
      <return type='char *' info='list of authorized keys'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='user' type='const char *' info='user'/>
      <arg name='flags' type='unsigned int' info='optional fine-tuning flags, currently unused, pass 0.'/>
    </function>
    <function name='virDomainAuthorizedSSHKeysSet' file='python'>
      <info>Manipulate set of public SSH authorized keys for given user in domain.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='user' type='const char *' info='user'/>
      <arg name='keys' type='char *' info='optional list of authorized keys to set/append/remove'/>
      <arg name='flags' type='int' info='optional OR&apos;ed set of virDomainAuthorizedSSHKeysSetFlags'/>
    </function>
    <function name='virDomainGetMessages' file='python'>
      <info>Fetch list of messages reported against domain.</info>
      <return type='char *' info='list of messages'/>
      <arg name='domain' type='virDomainPtr' info='a domain object'/>
      <arg name='flags' type='unsigned int' info='optional fine-tuning flags'/>
    </function>
    <function name='virDomainSetLaunchSecurityState' file='python'>
      <info>Set a launch security secret in the guest's memory.</info>
      <return type='int' info='0 in case of success, -1 in case of failure.'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to launch security state objects'/>
      <arg name='flags' type='unsigned int' info='currently used, set to 0.'/>
    </function>
    <function name='virDomainSaveParams' file='python'>
      <info>This method will suspend a domain and save its memory contents to a file on disk.</info>
      <return type='int' info='0 in case of success and -1 in case of failure'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to save parameter objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainRestoreParams' file='python'>
      <info>This method will restore a domain saved to disk.</info>
      <return type='int' info='0 in case of success and -1 in case of failure'/>
      <arg name='conn' type='virConnectPtr' info='pointer to the hypervisor connection'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to save parameter objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainSaveRestoreFlags'/>
    </function>
    <function name='virDomainGetAutostartOnce' file='python'>
      <info>Provides a boolean value indicating whether the domain is configured to be automatically started the next time the host machine boots only.</info>
      <return type='int' info='the autostart flag, or None in case of error'/>
      <arg name='domain' type='virDomainPtr' info='a network object'/>
    </function>
    <function name='virDomainSetThrottleGroup' file='python'>
      <info>Add throttlegroup or change all of the throttlegroup options within specific domain.</info>
      <return type='int' info='0 in case of success and -1 in case of failure'/>
      <arg name='domain' type='virDomainPtr' info='pointer to domain object'/>
      <arg name='group' type='const char *' info='throttle group name'/>
      <arg name='params' type='virTypedParameterPtr' info='pointer to blkio parameter objects'/>
      <arg name='flags'  type='int' info='an OR&apos;ed set of virDomainModificationImpact'/>
    </function>
  </symbols>
</api>
